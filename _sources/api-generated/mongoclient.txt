=============
MongoClient()
=============

------------------
Constructor
------------------


Create a new MongoClient instance.


  .. js:class:: MongoClient()

   :param object serverConfig: server config object.
   :param object [options]: additional options for the collection.


Options
 - **w**, {Number/String, > -1 || 'majority' || tag name} the write concern for the operation where < 1 is no acknowlegement of write and w >= 1, w = 'majority' or tag acknowledges the write
 - **wtimeout**, {Number, 0} set the timeout for waiting for write concern to finish (combines with w option)
 - **fsync**, (Boolean, default:false) write waits for fsync before returning
 - **journal**, (Boolean, default:false) write waits for journal sync before returning
 - **readPreference** {String}, the prefered read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
 - **native_parser** {Boolean, default:false}, use c++ bson parser.
 - **forceServerObjectId** {Boolean, default:false}, force server to create _id fields instead of client.
 - **pkFactory** {Object}, object overriding the basic ObjectID primary key generation.
 - **serializeFunctions** {Boolean, default:false}, serialize functions.
 - **raw** {Boolean, default:false}, peform operations using raw bson buffers.
 - **recordQueryStats** {Boolean, default:false}, record query statistics during execution.
 - **retryMiliSeconds** {Number, default:5000}, number of miliseconds between retries.
 - **numberOfRetries** {Number, default:5}, number of retries off connection.



Deprecated Options 
 - **safe** {true | {w:n, wtimeout:n} | {fsync:true}, default:false}, executes with a getLastError command returning the results of the command on MongoDB.


----
open
----


Initialize the database connection.

.. js:function:: open(callback)

   :param function callback: this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the connected mongoclient or null if an error occured.
   :returns: null 


**Examples**

  
  
  A basic example using the MongoClient to connect using a Server instance, similar to existing Db version

  .. code-block:: javascript

     var Db = require('mongodb').Db,
         MongoClient = require('mongodb').MongoClient,
         Server = require('mongodb').Server,
         ReplSetServers = require('mongodb').ReplSetServers,
         ObjectID = require('mongodb').ObjectID,
         Binary = require('mongodb').Binary,
         GridStore = require('mongodb').GridStore,
         Grid = require('mongodb').Grid,
         Code = require('mongodb').Code,
         BSON = require('mongodb').pure().BSON,
         assert = require('assert');

     // Set up the connection to the local db
     var mongoclient = new MongoClient(new Server("localhost", 27017, {native_parser: true}));
     
     // Open the connection to the server
     mongoclient.open(function(err, mongoclient) {
     
       // Get the first db and do an update document on it
       var db = mongoclient.db("integration_tests");
       db.collection('mongoclient_test').update({a:1}, {b:1}, {upsert:true}, function(err, result) {
         assert.equal(null, err);
         assert.equal(1, result);
     
         // Get another db and do an update document on it
         var db2 = mongoclient.db("integration_tests2");
         db2.collection('mongoclient_test').update({a:1}, {b:1}, {upsert:true}, function(err, result) {
           assert.equal(null, err);
           assert.equal(1, result);
     
           // Close the connection
           mongoclient.close();
         });
       });
     });  


-----
close
-----


Close the current db connection, including all the child db instances. Emits close event if no callback is provided.

.. js:function:: close(callback)

   :param function callback: this will be called after executing this method. The first parameter will contain the Error object if an error occured, or null otherwise. While the second parameter will contain the results from the close method or null if an error occured.
   :returns: null 


--
db
--


Create a new Db instance sharing the current socket connections.

.. js:function:: db(dbName)

   :param string dbName: the name of the database we want to use.
   :returns: db a db instance using the new database.

