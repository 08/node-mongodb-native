==============
CursorStream()
==============

------------------
Constructor
------------------


CursorStream


  .. js:class:: CursorStream()

   :param cursor cursor: a cursor object that the stream wraps.
   :returns: stream 


Returns a stream interface for the **cursor**.



Events
 - **data** {function(item) {}} the data event triggers when a document is ready.
 - **error** {function(err) {}} the error event triggers if an error happens.
 - **close** {function() {}} the end event triggers when there is no more documents available.


-----
pause
-----


Pauses the stream.

.. js:function:: pause()


**Examples**

  
  
  A simple example showing the use of the cursorstream pause function.

  .. code-block:: javascript

     var Db = require('mongodb').Db,
         MongoClient = require('mongodb').MongoClient,
         Server = require('mongodb').Server,
         ReplSetServers = require('mongodb').ReplSetServers,
         ObjectID = require('mongodb').ObjectID,
         Binary = require('mongodb').Binary,
         GridStore = require('mongodb').GridStore,
         Code = require('mongodb').Code,
         BSON = require('mongodb').pure().BSON,
         assert = require('assert');

     var db = new Db('integration_tests', new Server("127.0.0.1", 27017,
      {auto_reconnect: false, poolSize: 1}), {w:0, native_parser: false});
     
     // Establish connection to db
     db.open(function(err, db) {
     
       // Create a lot of documents to insert
       var docs = []
       for(var i = 0; i < 1; i++) {
         docs.push({'a':i})
       }
     
       // Create a collection
       db.createCollection('test_cursorstream_pause', function(err, collection) {
         assert.equal(null, err);
     
         // Insert documents into collection
         collection.insert(docs, {w:1}, function(err, ids) {
           // Peform a find to get a cursor
           var stream = collection.find().stream();
     
           // For each data item
           stream.on("data", function(item) {
             // Check if cursor is paused
             assert.equal(false, stream.paused);
             // Pause stream
             stream.pause();
             // Check if cursor is paused
             assert.equal(true, stream.paused);
     
             // Restart the stream after 1 miliscecond
             setTimeout(function() {
               stream.resume();
               // Check if cursor is paused
               process.nextTick(function() {
                 assert.equal(false, stream.paused);
               })
             }, 1);
           });
     
           // When the stream is done
           stream.on("close", function() {
             db.close();
           });
         });
       });
     });


------
resume
------


Resumes the stream.

.. js:function:: resume()


**Examples**

  
  
  A simple example showing the use of the cursorstream resume function.

  .. code-block:: javascript

     var Db = require('mongodb').Db,
         MongoClient = require('mongodb').MongoClient,
         Server = require('mongodb').Server,
         ReplSetServers = require('mongodb').ReplSetServers,
         ObjectID = require('mongodb').ObjectID,
         Binary = require('mongodb').Binary,
         GridStore = require('mongodb').GridStore,
         Code = require('mongodb').Code,
         BSON = require('mongodb').pure().BSON,
         assert = require('assert');

     var db = new Db('integration_tests', new Server("127.0.0.1", 27017,
      {auto_reconnect: false, poolSize: 1}), {w:0, native_parser: false});
     
     // Establish connection to db
     db.open(function(err, db) {
     
       // Create a lot of documents to insert
       var docs = []
       for(var i = 0; i < 1; i++) {
         docs.push({'a':i})
       }
     
       // Create a collection
       db.createCollection('test_cursorstream_resume', function(err, collection) {
         assert.equal(null, err);
     
         // Insert documents into collection
         collection.insert(docs, {w:1}, function(err, ids) {
           // Peform a find to get a cursor
           var stream = collection.find().stream();
     
           // For each data item
           stream.on("data", function(item) {
             // Check if cursor is paused
             assert.equal(false, stream.paused);
             // Pause stream
             stream.pause();
             // Check if cursor is paused
             assert.equal(true, stream.paused);
     
             // Restart the stream after 1 miliscecond
             setTimeout(function() {
     
               // Resume the stream
               stream.resume();
     
               // Check if cursor is paused
               process.nextTick(function() {
                 assert.equal(false, stream.paused);
               });
             }, 1);
           });
     
           // When the stream is done
           stream.on("close", function() {
             db.close();
           });
         });
       });
     });


-------
destroy
-------


Destroys the stream, closing the underlying
cursor. No more events will be emitted.

.. js:function:: destroy()


**Examples**

  
  
  A simple example showing the use of the cursorstream resume function.

  .. code-block:: javascript

     var Db = require('mongodb').Db,
         MongoClient = require('mongodb').MongoClient,
         Server = require('mongodb').Server,
         ReplSetServers = require('mongodb').ReplSetServers,
         ObjectID = require('mongodb').ObjectID,
         Binary = require('mongodb').Binary,
         GridStore = require('mongodb').GridStore,
         Code = require('mongodb').Code,
         BSON = require('mongodb').pure().BSON,
         assert = require('assert');

     var db = new Db('integration_tests', new Server("127.0.0.1", 27017,
      {auto_reconnect: false, poolSize: 1}), {w:0, native_parser: false});
     
     // Establish connection to db
     db.open(function(err, db) {
     
       // Create a lot of documents to insert
       var docs = []
       for(var i = 0; i < 1; i++) {
         docs.push({'a':i})
       }
     
       // Create a collection
       db.createCollection('test_cursorstream_destroy', function(err, collection) {
         assert.equal(null, err);
     
         // Insert documents into collection
         collection.insert(docs, {w:1}, function(err, ids) {
           // Peform a find to get a cursor
           var stream = collection.find().stream();
     
           // For each data item
           stream.on("data", function(item) {
             // Destroy stream
             stream.destroy();
           });
     
           // When the stream is done
           stream.on("close", function() {
             db.close();
           });
         });
       });
     });
     }
     
     exports.shouldStreamDocumentsWithPauseAndResumeForFetching = function(test) {
     var docs = []
     
     for(var i = 0; i < 3000; i++) {
       docs.push({'a':i})
     }
     
     var db = new Db('integration_tests', new Server("127.0.0.1", 27017,
      {auto_reconnect: false, poolSize: 5, ssl:useSSL}), {w:0, native_parser: native_parser});
     
     // Establish connection to db
     db.open(function(err, db) {
       db.createCollection('test_streaming_function_with_limit_for_fetching', function(err, collection) {
         assert.ok(collection instanceof Collection);
     
         collection.insert(docs, {w:1}, function(err, ids) {
           // Peform a find to get a cursor
           var stream = collection.find({}).stream();
           var data = [];
     
           // For each data item
           stream.on("data", function(item) {
             stream.pause()
     
             collection.findOne({}, function(err, result) {
               data.push(1);
               stream.resume();
             })
           });
     
           // When the stream is done
           stream.on("close", function() {
             assert.equal(3000, data.length);
             db.close();
             test.done();
           });
         });
       });
     });

