========
Binary()
========

------------------
Constructor
------------------


A class representation of the BSON Binary type.


  .. js:class:: Binary()

   :param buffer buffer: a buffer object containing the binary data.
   :param number [subType]: the option binary type.
   :returns: grid 


Sub types
 - **BSON.BSON_BINARY_SUBTYPE_DEFAULT**, default BSON type.
 - **BSON.BSON_BINARY_SUBTYPE_FUNCTION**, BSON function type.
 - **BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY**, BSON byte array type.
 - **BSON.BSON_BINARY_SUBTYPE_UUID**, BSON uuid type.
 - **BSON.BSON_BINARY_SUBTYPE_MD5**, BSON md5 type.
 - **BSON.BSON_BINARY_SUBTYPE_USER_DEFINED**, BSON user defined type.


------------------
Constants
------------------

.. csv-table:: 
   :header: "Constant Name", "Value", "Description"
   :widths: 15, 10, 30

   "Binary.SUBTYPE_DEFAULT", "0", "Default BSON type"
   "Binary.SUBTYPE_FUNCTION", "1", "Function BSON type"
   "Binary.SUBTYPE_BYTE_ARRAY", "2", "Byte Array BSON type"
   "Binary.SUBTYPE_UUID", "3", "UUID BSON type"
   "Binary.SUBTYPE_MD5", "4", "MD5 BSON type"
   "Binary.SUBTYPE_USER_DEFINED", "128", "User BSON type"

---
put
---


Updates this binary with byte_value.

.. js:function:: put(byte_value)

   :param character byte_value: a single byte we wish to write.

**Examples**

  
  
  A simple example showing the usage of the binary put method.

  .. code-block:: javascript

     var Db = require('mongodb').Db,
         Server = require('mongodb').Server,
         ReplSetServers = require('mongodb').ReplSetServers,
         ObjectID = require('mongodb').ObjectID,
         Binary = require('mongodb').Binary,
         GridStore = require('mongodb').GridStore,
         Code = require('mongodb').Code,
         BSON = require('mongodb').pure().BSON,
         assert = require('assert');

     // Create an empty Binary object
     var binary = new Binary(new Buffer(''), BSON.BSON_BINARY_SUBTYPE_DEFAULT);
     // Write some character to the Binary value
     binary.put('h');
     binary.put('e');
     binary.put('l');
     binary.put('l');
     binary.put('o');
     // Validate the content of the binary
     assert.equal('hello', binary.toString('ascii'));


-----
write
-----


Writes.

.. js:function:: write(string, offset)

   :param buffer string: a string or buffer to be written to the Binary BSON object.
   :param number offset: specify the binary of where to write the content.

**Examples**

  
  
  A simple example showing the usage of the binary write method.

  .. code-block:: javascript

     var Db = require('mongodb').Db,
         Server = require('mongodb').Server,
         ReplSetServers = require('mongodb').ReplSetServers,
         ObjectID = require('mongodb').ObjectID,
         Binary = require('mongodb').Binary,
         GridStore = require('mongodb').GridStore,
         Code = require('mongodb').Code,
         BSON = require('mongodb').pure().BSON,
         assert = require('assert');

     // Create an empty Binary object
     var binary = new Binary(new Buffer(''), BSON.BSON_BINARY_SUBTYPE_DEFAULT);
     // Write some data to the binary
     binary.write('hello', 0);
     // Validate the content of the binary
     assert.equal('hello', binary.toString('ascii'));


----
read
----


Reads **length** bytes starting at **position**.

.. js:function:: read(position, length)

   :param number position: read from the given position in the Binary.
   :param number length: the number of bytes to read.
   :returns: buffer 


**Examples**

  
  
  A simple example showing the usage of the binary read method.

  .. code-block:: javascript

     var Db = require('mongodb').Db,
         Server = require('mongodb').Server,
         ReplSetServers = require('mongodb').ReplSetServers,
         ObjectID = require('mongodb').ObjectID,
         Binary = require('mongodb').Binary,
         GridStore = require('mongodb').GridStore,
         Code = require('mongodb').Code,
         BSON = require('mongodb').pure().BSON,
         assert = require('assert');

     // Create an empty Binary object
     var binary = new Binary(new Buffer(''), BSON.BSON_BINARY_SUBTYPE_DEFAULT);
     // Write some data to the binary
     binary.write('hello', 0);
     // Read a couple of characters from the binary
     var data = binary.read(1, 2);
     // Validate the content of the binary
     assert.equal('el', data.toString('ascii'));


-----
value
-----


Returns the value of this binary as a string.

.. js:function:: value()

   :returns: string 


**Examples**

  
  
  A simple example showing the usage of the binary value method.

  .. code-block:: javascript

     var Db = require('mongodb').Db,
         Server = require('mongodb').Server,
         ReplSetServers = require('mongodb').ReplSetServers,
         ObjectID = require('mongodb').ObjectID,
         Binary = require('mongodb').Binary,
         GridStore = require('mongodb').GridStore,
         Code = require('mongodb').Code,
         BSON = require('mongodb').pure().BSON,
         assert = require('assert');

     // Create an empty Binary object
     var binary = new Binary(new Buffer(''), BSON.BSON_BINARY_SUBTYPE_DEFAULT);
     // Write some data to the binary
     binary.write('hello', 0);
     // Validate the content of the binary
     assert.equal('hello', binary.value());


------
length
------


Length.

.. js:function:: length()

   :returns: number the length of the binary.


**Examples**

  
  
  A simple example showing the usage of the binary length method.

  .. code-block:: javascript

     var Db = require('mongodb').Db,
         Server = require('mongodb').Server,
         ReplSetServers = require('mongodb').ReplSetServers,
         ObjectID = require('mongodb').ObjectID,
         Binary = require('mongodb').Binary,
         GridStore = require('mongodb').GridStore,
         Code = require('mongodb').Code,
         BSON = require('mongodb').pure().BSON,
         assert = require('assert');

     // Create an empty Binary object
     var binary = new Binary(new Buffer(''), BSON.BSON_BINARY_SUBTYPE_DEFAULT);
     // Write some data to the binary
     binary.write('hello');
     // Validate the content of the binary
     assert.equal(5, binary.length());

